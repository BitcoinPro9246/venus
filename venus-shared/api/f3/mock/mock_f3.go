// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/venus/venus-shared/api/f3 (interfaces: F3)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	address "github.com/filecoin-project/go-address"
	certs "github.com/filecoin-project/go-f3/certs"
	gomock "github.com/golang/mock/gomock"
)

// MockF3 is a mock of F3 interface.
type MockF3 struct {
	ctrl     *gomock.Controller
	recorder *MockF3MockRecorder
}

// MockF3MockRecorder is the mock recorder for MockF3.
type MockF3MockRecorder struct {
	mock *MockF3
}

// NewMockF3 creates a new mock instance.
func NewMockF3(ctrl *gomock.Controller) *MockF3 {
	mock := &MockF3{ctrl: ctrl}
	mock.recorder = &MockF3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockF3) EXPECT() *MockF3MockRecorder {
	return m.recorder
}

// F3GetCertificate mocks base method.
func (m *MockF3) F3GetCertificate(arg0 context.Context, arg1 uint64) (*certs.FinalityCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F3GetCertificate", arg0, arg1)
	ret0, _ := ret[0].(*certs.FinalityCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// F3GetCertificate indicates an expected call of F3GetCertificate.
func (mr *MockF3MockRecorder) F3GetCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F3GetCertificate", reflect.TypeOf((*MockF3)(nil).F3GetCertificate), arg0, arg1)
}

// F3GetLatestCertificate mocks base method.
func (m *MockF3) F3GetLatestCertificate(arg0 context.Context) (*certs.FinalityCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F3GetLatestCertificate", arg0)
	ret0, _ := ret[0].(*certs.FinalityCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// F3GetLatestCertificate indicates an expected call of F3GetLatestCertificate.
func (mr *MockF3MockRecorder) F3GetLatestCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F3GetLatestCertificate", reflect.TypeOf((*MockF3)(nil).F3GetLatestCertificate), arg0)
}

// F3Participate mocks base method.
func (m *MockF3) F3Participate(arg0 context.Context, arg1 address.Address) (<-chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F3Participate", arg0, arg1)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// F3Participate indicates an expected call of F3Participate.
func (mr *MockF3MockRecorder) F3Participate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F3Participate", reflect.TypeOf((*MockF3)(nil).F3Participate), arg0, arg1)
}
